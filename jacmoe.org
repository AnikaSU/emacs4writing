#+TITLE: DotEmacs
#+AUTHOR: Jacob Moen

A. [[#a-bootstrap][Bootstrap]] |
B. [[#b-theme][Theme]] |
C. [[#c-languages][Languages]] |
D. [[#d-features][Features]]

* A. Bootstrap

1. [[#1-use-better-defaults][Use better defaults]]
2. [[#2-validate-emacs-version][Validate Emacs' version]]
3. [[#3-load-customel][Load .custom.el]]
4. [[#4-load-secretel][Load .secret.el]]
5. [[#5-initialize-melpa][Initialize MELPA]]

** 1. Use better defaults

#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0)                          ; Disable the cursor blinking
  (scroll-bar-mode 0)                            ; Disable the scroll bar
  (tool-bar-mode 0)                              ; Disable the tool bar
  (tooltip-mode 0))                              ; Disable the tooltips
#+END_SRC

Some sane defaults

#+BEGIN_SRC emacs-lisp
(setq-default
 ad-redefinition-action 'accept                  ; Silence warnings for redefinition
 delete-by-moving-to-trash t                     ; Delete files to trash
 display-time-default-load-average nil           ; Don't display load average
 display-time-format "%H:%M"                     ; Format the time string
 fill-column 85                                  ; Set width for automatic line breaking
 gc-cons-threshold most-positive-fixnum          ; Increase garbage collector treshold
 help-window-select t                            ; Focus new help windows when opened
 indent-tabs-mode nil                            ; Stop using tabs to indent
 inhibit-startup-screen t                        ; Disable start-up screen
 initial-scratch-message ""                      ; Empty the initial *scratch* buffer
 mouse-yank-at-point t                           ; Yank at point rather than cursor
 ns-use-srgb-colorspace nil                      ; Don't use sRGB colors
 scroll-conservatively most-positive-fixnum      ; Always scroll by one line
 select-enable-clipboard t                       ; Merge system's and Emacs' clipboard
 show-trailing-whitespace nil                    ; Display trailing whitespaces
 split-height-threshold nil                      ; Disable vertical window splitting
 split-width-threshold nil                       ; Disable horizontal window splitting
 tab-width 4                                     ; Set width for tabs
 uniquify-buffer-name-style 'forward             ; Uniquify buffer names
 ring-bell-function 'ignore                      ; Be quiet!
 window-combination-resize t)                    ; Resize windows proportionally

(column-number-mode 0)                           ; Hide the column number
(display-battery-mode 0)                         ; Hide the battery level
(display-time-mode 1)                            ; Hide the time representation
(fringe-mode '(10 . 10))                         ; Show vertical fringes
(global-hl-line-mode 1)                          ; Hightlight current line
(global-subword-mode 1)                          ; Iterate through CamelCase words
(line-number-mode 1)                             ; Show the line number
(menu-bar-mode 0)                                ; Disable the menu bar
(mouse-avoidance-mode 'animate)                  ; Move pointer to avoid collision with point
(global-set-key (kbd "C-x C-b") 'ibuffer)        ; Use ibuffer instead of list buffers
#+END_SRC

Enable some more goodies.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)                    ; Replace yes/no prompts with y/n
(put 'downcase-region 'disabled nil)             ; Enable downcase-region
(put 'upcase-region 'disabled nil)               ; Enable upcase-region
(setq create-lockfiles nil)                      ; No need for ~ files when editing
(setq make-backup-files nil)                     ; Don't want any backup files
(global-set-key (kbd "M-3") 'delete-other-windows) ; expand current pane
(global-set-key (kbd "M-4") 'split-window-below) ; split pane top/bottom
(global-set-key (kbd "M-2") 'delete-window)      ; close current pane
(global-set-key (kbd "M-s") 'other-window)       ; cursor to other pane
#+END_SRC

Reset garbage collector treshold after initialization is finished and
=garbage-collect= on focus-out. Emacs /should/ feel snappier.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
(add-hook 'focus-out-hook 'garbage-collect)
#+END_SRC

Those variables are used throughout the whole configuration.

#+BEGIN_SRC emacs-lisp
(defvar me/font-family            "Monaco"  "The font to use.")
(defvar me/font-size-default      120       "The font size to use for default text.")
(defvar me/font-size-header       140       "The font size to use for headers.")
(defvar me/font-size-mode-line    120       "The font size to use for the mode line.")
#+END_SRC

** 2. Validate Emacs' version

#+BEGIN_SRC emacs-lisp
(when (version<= emacs-version "24")
  (unless (yes-or-no-p "Your Emacs is getting old. Kitten may be killed, continue? ")
    (kill-emacs)))
#+END_SRC

** 3. Load =.custom.el=

One is able to use the customization interface that is bundled within Emacs. It is
meant to help people who are not familiar with Emacs Lisp in the configuration of
Emacs itself. By default, changes in the customization will be automatically detected
and appended at the end of the configuration file, =init.el=.

Since that in my case, the actual configuration file is new one, crafted by
=org-mode=, adding code at the end of =init.el= might mess things up. The following
tells Emacs to add extra code in another file that would be then loaded, if existing
that is.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** 4. Load =.secret.el=

I load =~/.emacs.d/.secret.el= to keep sensible things out of version control. For
instance, you could set your identity by customizing both =user-full-name= and
=user-mail-address= in this file.

#+BEGIN_SRC emacs-lisp
(let ((secret.el (expand-file-name ".secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC

** 5. Initialize MELPA

Dependency checks and [[https://melpa.org][MELPA]] initialization, sugar-wrapped.

#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (setq-default
   load-prefer-newer t
   package-enable-at-startup nil)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (unless (package-installed-p 'delight)
    (package-refresh-contents)
    (package-install 'delight))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)))
#+END_SRC

In order to have unified package declarations in my Emacs files, I use
[[https://github.com/jwiegley/use-package][use-package]]. It allows for isolation and
clarity.

#+BEGIN_QUOTE
The =use-package= macro allows you to isolate package configuration in your =.emacs=
file in a way that is both performance-oriented and, well, tidy. I created it because
I have over 80 packages that I use in Emacs, and things were getting difficult to
manage. Yet with this utility my total load time is around 2 seconds, with no loss of
functionality!

[[https://github.com/jwiegley/use-package][John Wiegley]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package)
  (setq-default
   use-package-always-defer t
   use-package-always-ensure t))
#+END_SRC

* B. Theme

1. [[#1-set-a-color-palette][Set a color palette]]
2. [[#2-configure-zenburn][Configure Zenburn]]

** 1. Set a color palette

I like to have an accessible copy of my active theme's color codes. That way, I can
fix other packages' colors while still using the same color codes and keep a sane
consistency everywhere.

I consider this method safe because I am using the all-famous
[[https://github.com/bbatsov/zenburn-emacs][Zenburn Emacs port]] palette. It is
/very/ unlikely that any of its tones will ever change.

#+BEGIN_SRC emacs-lisp
(defconst zenburn/bg+3      "#6F6F6F"  "Zenburn palette: #6F6F6F.")
(defconst zenburn/bg+2      "#5F5F5F"  "Zenburn palette: #5F5F5F.")
(defconst zenburn/bg+1      "#4F4F4F"  "Zenburn palette: #4F4F4F.")
(defconst zenburn/bg+0      "#494949"  "Zenburn palette: #494949.")
(defconst zenburn/bg        "#3F3F3F"  "Zenburn palette: #3F3F3F.")
(defconst zenburn/bg-0      "#383838"  "Zenburn palette: #383838.")
(defconst zenburn/bg-1      "#2B2B2B"  "Zenburn palette: #2B2B2B.")
(defconst zenburn/bg-2      "#000000"  "Zenburn palette: #000000.")
(defconst zenburn/blue+1    "#94BFF3"  "Zenburn palette: #94BFF3.")
(defconst zenburn/blue      "#8CD0D3"  "Zenburn palette: #8CD0D3.")
(defconst zenburn/blue-1    "#7CB8BB"  "Zenburn palette: #7CB8BB.")
(defconst zenburn/blue-2    "#6CA0A3"  "Zenburn palette: #6CA0A3.")
(defconst zenburn/blue-3    "#5C888B"  "Zenburn palette: #5C888B.")
(defconst zenburn/blue-4    "#4C7073"  "Zenburn palette: #4C7073.")
(defconst zenburn/blue-5    "#366060"  "Zenburn palette: #366060.")
(defconst zenburn/cyan      "#93E0E3"  "Zenburn palette: #93E0E3.")
(defconst zenburn/fg+1      "#FFFFEF"  "Zenburn palette: #FFFFEF.")
(defconst zenburn/fg        "#DCDCCC"  "Zenburn palette: #DCDCCC.")
(defconst zenburn/fg-1      "#656555"  "Zenburn palette: #656555.")
(defconst zenburn/green+4   "#BFEBBF"  "Zenburn palette: #BFEBBF.")
(defconst zenburn/green+3   "#AFD8AF"  "Zenburn palette: #AFD8AF.")
(defconst zenburn/green+2   "#9FC59F"  "Zenburn palette: #9FC59F.")
(defconst zenburn/green+1   "#8FB28F"  "Zenburn palette: #8FB28F.")
(defconst zenburn/green     "#7F9F7F"  "Zenburn palette: #7F9F7F.")
(defconst zenburn/green-1   "#5F7F5F"  "Zenburn palette: #5F7F5F.")
(defconst zenburn/magenta   "#DC8CC3"  "Zenburn palette: #DC8CC3.")
(defconst zenburn/orange    "#DFAF8F"  "Zenburn palette: #DFAF8F.")
(defconst zenburn/red+1     "#DCA3A3"  "Zenburn palette: #DCA3A3.")
(defconst zenburn/red       "#CC9393"  "Zenburn palette: #CC9393.")
(defconst zenburn/red-1     "#BC8383"  "Zenburn palette: #BC8383.")
(defconst zenburn/red-2     "#AC7373"  "Zenburn palette: #AC7373.")
(defconst zenburn/red-3     "#9C6363"  "Zenburn palette: #9C6363.")
(defconst zenburn/red-4     "#8C5353"  "Zenburn palette: #8C5353.")
(defconst zenburn/yellow    "#F0DFAF"  "Zenburn palette: #F0DFAF.")
(defconst zenburn/yellow-1  "#E0CF9F"  "Zenburn palette: #E0CF9F.")
(defconst zenburn/yellow-2  "#D0BF8F"  "Zenburn palette: #D0BF8F.")
#+END_SRC

** 2. Configure Zenburn

Load =zenburn-theme= and fix some high-level faces to match my personal preferences.

#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :demand t
  :config
  (load-theme 'zenburn t)
  (set-face-attribute 'default nil :height me/font-size-default)
  (set-face-attribute 'font-lock-comment-delimiter-face nil
                      :foreground zenburn/bg+3 :italic t)
  (set-face-attribute 'font-lock-comment-face nil :italic t)
  (set-face-attribute 'font-lock-doc-face nil :italic t)
  (set-face-attribute 'font-lock-function-name-face nil :foreground zenburn/blue)
  (set-face-attribute 'fringe nil :background zenburn/bg-0 :foreground zenburn/bg+3)
  (set-face-attribute 'header-line nil
                      :box `(:line-width 1 :color ,zenburn/bg-1)
                      :height me/font-size-header)
  (set-face-attribute 'help-argument-name nil :foreground zenburn/orange)
  (set-face-attribute 'hl-line nil :background zenburn/bg+1)
  (set-face-attribute 'isearch nil :background zenburn/blue :foreground zenburn/bg)
  (set-face-attribute 'isearch-lazy-highlight-face nil
                      :background zenburn/blue-2 :foreground zenburn/bg)
  (set-face-attribute 'region nil :foreground zenburn/green)
  (set-face-attribute 'vertical-border nil :foreground zenburn/bg-1)
  (when (member me/font-family (font-family-list))
    (set-face-attribute 'default nil :font me/font-family)))
#+END_SRC
 
* C. Languages

1. [[#1-css][CSS]]
2. [[#2-yaml][YAML]]
3. [[#3-markdown][Markdown]]
4. [[#4-org][Org]]


** 1. CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :delight css-mode "CSS"
  :config (setq-default css-indent-offset 2))

(use-package scss-mode
  :delight scss-mode "SCSS"
  :mode ("\\.css\\'" "\\.sass\\'" "\\.scss\\'")
  :init
  (add-hook 'scss-mode-hook
            (lambda ()
              (setq-local comment-end "")
              (setq-local comment-start "//")))
  :config (setq-default scss-compile-at-save nil))
#+END_SRC

** 2. YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :delight yaml-mode "YAML"
  :mode "\\.yml\\'")
#+END_SRC

** 3. Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :delight markdown-mode "Markdown"
  :mode
  ("INSTALL\\'"
   "CONTRIBUTORS\\'"
   "LICENSE\\'"
   "README\\'"
   "\\.markdown\\'"
   "\\.md\\'")
  :init (add-hook 'markdown-mode-hook 'turn-on-auto-fill)
  :config
  (unbind-key "M-<down>" markdown-mode-map)
  (unbind-key "M-<up>" markdown-mode-map)
  (setq-default markdown-asymmetric-header t))
#+END_SRC

** 4. Org

#+BEGIN_QUOTE
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.

[[http://orgmode.org/][Carsten Dominik]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package org
  :delight org-mode "Org"
  :bind (:map org-mode-map ("<M-return>" . org-insert-heading-after-current))
  :init (add-hook 'org-mode-hook 'turn-on-auto-fill)
  :config
  (setq-default
   org-descriptive-links nil
   org-edit-src-content-indentation 0
   org-src-fontify-natively t
   org-src-window-setup 'current-window
   org-support-shift-select 'always
   org-startup-folded nil
   org-startup-truncated nil)
  (set-face-attribute 'org-block-background nil :background zenburn/bg+0)
  (set-face-attribute 'org-block-begin-line nil :background 'unspecified)
  (set-face-attribute 'org-block-end-line nil :background 'unspecified)
  (unbind-key "C-a" org-mode-map)
  (unbind-key "C-c C-w" org-mode-map)
  (unbind-key "C-e" org-mode-map)
  (unbind-key "<C-return>" org-mode-map)
  (unbind-key "<C-S-down>" org-mode-map)
  (unbind-key "<C-S-up>" org-mode-map))
#+END_SRC


* D. Features

1. [[#1-auto-completion][Auto-Completion]]
2. [[#2-desktop][Desktop]]
3. [[#3-projectile][Projectile]]
4. [[#4-rainbow][Rainbow]]
5. [[#5-writeroom][Writeroom]]
6. [[#6-magit][Magit]]
7. [[#7-expand][Expand]]
8. [[#8-mode-line][Mode-Line]]
9. [[#9-autodim][Autodim]]
10. [[#10-multiplecursors][MultipleCursors]]
11. [[#11-helm][Helm]]
12. [[#12-helm-plugins][Helm Plugins]]
13. [[#13-linters][Linters]]


** 1. Auto-Completion

Auto-completion at point. Display a small pop-in containing the candidates.

#+BEGIN_QUOTE
Company is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

[[http://company-mode.github.io/][Dmitry Gutov]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package company
  :defer 1
  :config
  (global-company-mode)
  (setq-default
   company-idle-delay .2
   company-minimum-prefix-length 1
   company-tooltip-align-annotations t))

(use-package company-dabbrev
  :ensure nil
  :after company
  :config (setq-default company-dabbrev-downcase nil))

(use-package company-tern
  :after company
  :config
  (add-to-list 'company-backends 'company-tern)
  (setq-default
   company-tern-meta-as-single-line t
   company-tern-property-marker " *"))
#+END_SRC

** 2. Desktop

Save and restore Emacs status, including buffers, modes, point and windows.

#+BEGIN_SRC emacs-lisp
(use-package desktop
  :demand t
  :config
  (desktop-save-mode 1)
  (add-to-list 'desktop-globals-to-save 'golden-ratio-adjust-factor))
#+END_SRC

** 3. Projectile

Projectile brings project-level facilities to Emacs such as grep, find and replace.

#+BEGIN_QUOTE
Projectile is a project interaction library for Emacs. Its goal is to provide a nice
set of features operating on a project level without introducing external
dependencies (when feasible). For instance - finding project files has a portable
implementation written in pure Emacs Lisp without the use of GNU find (but for
performance sake an indexing mechanism backed by external commands exists as well).

[[https://github.com/bbatsov/projectile][Bozhidar Batsov]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t
  :config
  (setq projectile-switch-project-action #'projectile-commander)
  (def-projectile-commander-method ?d "Open project root in dired." (projectile-dired))
  (projectile-global-mode))
#+END_SRC

** 4. Rainbow
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :demand t
  :init
  (add-hook 'prog-mode-hook 'rainbow-mode)
  :config
  (setq-default rainbow-x-colors-major-mode-list '()))
#+END_SRC

** 5. Writeroom
#+BEGIN_QUOTE
Writeroom-mode is a minor mode for Emacs that implements a distraction-free writing mode similar to the famous Writeroom editor for OS X.
[[https://github.com/joostkremers/writeroom-mode][https://github.com/joostkremers/writeroom-mode]]
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
  :demand t
  :config
  (setq writeroom-width 120))
#+END_SRC

** 6. Magit

Magit provide Git facilities directly from within Emacs.

#+BEGIN_QUOTE
Magit is an interface to the version control system [[https://git-scm.com/][Git]],
implemented as an [[https://www.gnu.org/software/emacs][Emacs]] package. Magit
aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps
and improves upon each and every Git command, it is complete enough to allow even
experienced Git users to perform almost all of their daily version control tasks
directly from within Emacs. While many fine Git clients exist, only Magit and Git
itself deserve to be called porcelains. [[https://magit.vc/about.html][(more)]]

[[https://github.com/magit/magit][Jonas Bernoulli]]
#+END_QUOTE

- *TODO*: Make a hydra.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  (("C-x g" . magit-status))
  :config

  ;; Redefine how Magit display buffers
  (defun me/magit-display-buffer-function (buffer)
    "Render some magit modes in the currently selected buffer."
    (display-buffer
     buffer
     (cond ((and (derived-mode-p 'magit-mode)
                 (eq (with-current-buffer buffer major-mode) 'magit-status-mode))
            nil)
           ((memq (with-current-buffer buffer major-mode)
                  '(magit-process-mode
                    magit-revision-mode
                    magit-diff-mode
                    magit-stash-mode))
            nil)
           (t '(display-buffer-same-window)))))

  ;; Use better defaults
  (setq-default
   magit-display-buffer-function 'me/magit-display-buffer-function
   magit-diff-highlight-hunk-body nil
   magit-popup-display-buffer-action '((display-buffer-same-window))
   magit-refs-show-commit-count (quote all)
   magit-section-show-child-count t
   magit-set-upstream-on-push 'askifnotset)

  ;; Customize lighters
  (delight
   '((magit-diff-mode "Magit Diff")
     (magit-log-mode "Magit Log")
     (magit-popup-mode "Magit Popup")
     (magit-status-mode "Magit Status")))

  ;; Customize faces
  (set-face-attribute 'magit-diff-added nil
                      :background zenburn/bg+0 :foreground zenburn/green+3)
  (set-face-attribute 'magit-diff-context nil :background zenburn/bg+0)
  (set-face-attribute 'magit-diff-file-heading-highlight nil :background 'unspecified)
  (set-face-attribute 'magit-diff-hunk-heading nil :background zenburn/bg+2)
  (set-face-attribute 'magit-diff-hunk-heading-highlight nil :background zenburn/bg+2)
  (set-face-attribute 'magit-diff-removed nil
                      :background zenburn/bg+0 :foreground zenburn/red)
  (set-face-attribute 'magit-popup-heading nil :height me/font-size-header)
  (set-face-attribute 'magit-section-heading nil :height me/font-size-header)
  (set-face-attribute 'magit-section-highlight nil :background 'unspecified))

(use-package gitattributes-mode :delight gitattributes-mode "Git Attributes")
(use-package gitconfig-mode :delight gitconfig-mode "Git Config")
(use-package gitignore-mode :delight gitignore-mode "Git Ignore")
#+END_SRC

** 7. Expand

HippieExpand manages expansions a la [[http://emmet.io/][Emmet]]. So I've gathered
all features that look anywhere close to this behavior for it to handle under the
same bind, that is =<C-return>=. Basically it's an expand DWIM.

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :init
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  :config
  (setq-default emmet-move-cursor-between-quote t)
  (unbind-key "<C-return>" emmet-mode-keymap)
  (unbind-key "C-M-<left>" emmet-mode-keymap)
  (unbind-key "C-M-<right>" emmet-mode-keymap))

(use-package hippie-exp
  :ensure nil
  :preface
  (defun me/emmet-try-expand-line (args)
    "Try `emmet-expand-line' if `emmet-mode' is active. Else, does nothing."
     (interactive "P")
     (when emmet-mode (emmet-expand-line args)))
  :bind ("<C-return>" . hippie-expand)
  :config
  (setq-default
   hippie-expand-try-functions-list '(yas-hippie-try-expand me/emmet-try-expand-line)
   hippie-expand-verbose nil))

(use-package yasnippet
  :init
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'js-mode-hook 'yas-minor-mode)
  (add-hook 'org-mode-hook 'yas-minor-mode)
  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'sgml-mode-hook 'yas-minor-mode)
  :config
  (setq-default yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-reload-all)
  (unbind-key "TAB" yas-minor-mode-map)
  (unbind-key "<tab>" yas-minor-mode-map))
#+END_SRC


** 8. Mode-Line

- Green means buffer is clean.
- Red means buffer is modified.
- Blue means buffer is read-only.
- Colored bullets represent =flycheck= critical, warning and informational errors.
- The segment next to the clock indicate the current perspective from =persp-mode=,
  red when the buffer doesn't belong to the current perspective.

Delight allows you to change modes --- both major and minor --- lighters. They are
the descriptive strings than you see appear within the =mode-line=.

To make it work with =spaceline= (which uses =powerline= internally), I need to allow
it to use the newly changed strings.

#+BEGIN_SRC emacs-lisp
(use-package delight
  :config
  (defadvice powerline-major-mode (around delight-powerline-major-mode activate)
    (let ((inhibit-mode-name-delight nil)) ad-do-it))
  (defadvice powerline-minor-modes (around delight-powerline-minor-modes activate)
    (let ((inhibit-mode-name-delight nil)) ad-do-it)))
#+END_SRC

Spaceline, is a mode-line configuration framework. Like what =powerline= does but at
a shallower level. It's still very customizable nonetheless.

#+BEGIN_QUOTE
This is the package that provides [[http://spacemacs.org/][Spacemacs]] with its
famous mode-line theme. It has been extracted as an independent package for general
fun and profit.

[[https://github.com/TheBB/spaceline][Eivind Fonn]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package spaceline :demand t)
(use-package spaceline-config
  :ensure nil
  :after spaceline

  :config

  ;; Configure the mode-line
  (setq-default
   mode-line-format '("%e" (:eval (spaceline-ml-main)))
   powerline-default-separator 'wave
   spaceline-display-default-perspective t
   powerline-height 20
   spaceline-highlight-face-func 'spaceline-highlight-face-modified
   spaceline-flycheck-bullet "• %s"
   spaceline-separator-dir-left '(left . left)
   spaceline-separator-dir-right '(right . right))
  (spaceline-helm-mode)

  ;; Build a segment for the version control branch
  (spaceline-define-segment me/version-control
    (when vc-mode
      (substring vc-mode (+ 2 (length (symbol-name (vc-backend buffer-file-name)))))))

  ;; Build a segment for helm-follow-mode
  (spaceline-define-segment me/helm-follow
    (when (and (bound-and-true-p helm-alive-p)
               spaceline--helm-current-source
               (eq 1 (cdr (assq 'follow spaceline--helm-current-source))))
      (propertize "" 'face 'success)))

  ;; Build a segment for the active region
  (spaceline-define-segment me/selection-info
    (when mark-active
      (let* ((lines (count-lines (region-beginning) (min (1+ (region-end)) (point-max))))
             (chars (- (1+ (region-end)) (region-beginning)))
             (cols (1+ (abs (- (spaceline--column-number-at-pos (region-end))
                               (spaceline--column-number-at-pos (region-beginning))))))
             (rect (bound-and-true-p rectangle-mark-mode))
             (multi-line (> lines 1)))
        (cond
         (rect (format "%d × %d" (1- cols) lines))
         (multi-line (format "%d lines" (if (eq (current-column) 0) (1- lines) lines)))
         (t (format "%d chars" (1- chars)))))))

  ;; Build the mode-lines
  (spaceline-install
   `((major-mode :face highlight-face)
     ((remote-host buffer-id line) :separator ":")
     (anzu))
   `((me/selection-info)
     ((flycheck-error flycheck-warning flycheck-info) :when active)
     ((projectile-root me/version-control) :separator "  ")
     (workspace-number)
     (global :face highlight-face)))
  (spaceline-install
   'helm
   '((helm-buffer-id :face spaceline-read-only)
     (helm-number)
     (me/helm-follow :fallback "")
     helm-prefix-argument)
   '((helm-help)
     (global :face spaceline-read-only)))

  ;; Customize the mode-line
  (set-face-attribute 'mode-line nil
                      :box `(:line-width 1 :color ,zenburn/bg-2)
                      :foreground zenburn/bg+3
                      :height me/font-size-mode-line)
  (set-face-attribute 'mode-line-inactive nil
                      :box `(:line-width 1 :color ,zenburn/bg-2)
                      :foreground zenburn/bg+3
                      :height me/font-size-mode-line)
  (set-face-attribute 'powerline-active2 nil :background zenburn/bg+2)
  (set-face-attribute 'powerline-inactive2 nil :background zenburn/bg+2)
  (set-face-attribute 'spaceline-flycheck-error nil :foreground zenburn/red)
  (set-face-attribute 'spaceline-flycheck-info nil :foreground zenburn/blue)
  (set-face-attribute 'spaceline-flycheck-warning nil :foreground zenburn/orange)
  (set-face-attribute 'spaceline-modified nil
                      :background zenburn/red :foreground zenburn/red-4)
  (set-face-attribute 'spaceline-read-only nil
                      :background zenburn/blue+1 :foreground zenburn/blue-5)
  (set-face-attribute 'spaceline-unmodified nil
                      :background zenburn/green :foreground zenburn/green+4))
#+END_SRC


** 9. Autodim
Auto-dim other buffers. Pretty self-explanatory.

#+BEGIN_SRC emacs-lisp
(use-package auto-dim-other-buffers
  :demand t
  :config
  (auto-dim-other-buffers-mode 1)
  (set-face-attribute 'auto-dim-other-buffers-face nil :background zenburn/bg-0))
#+END_SRC


** 10. MultipleCursors

Enable multiple cursors at once. Some witchcraft at work here.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :defer 1
  :bind
  (("C-S-<mouse-1>" . mc/add-cursor-on-click)
   ("C-S-c C-S-a" . mc/vertical-align-with-space)
   ("C-S-c C-S-c" . mc/edit-lines)
   ("C-S-c C-S-l" . mc/insert-letters)
   ("C-S-c C-S-n" . mc/insert-numbers)
   ("C-'" . mc-hide-unmatched-lines-mode)
   ("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("C-c C-<" . mc/mark-all-like-this)
   ("C-," . mc/unmark-next-like-this)
   ("C-." . mc/skip-to-next-like-this))
  :config
  (setq-default
   mc/edit-lines-empty-lines 'ignore
   mc/insert-numbers-default 1
   mc/list-file (expand-file-name ".multiple-cursors.el" user-emacs-directory)))
#+END_SRC

** 11. Helm

Helm is a beast. Although heavily, it replaces =ido-mode= in many ways.

#+BEGIN_QUOTE
=Helm= is an Emacs framework for incremental completions and narrowing selections. It
helps to rapidly complete file names, buffer names, or any other Emacs interactions
requiring selecting an item from a list of possible choices.

Helm is a fork of =anything.el=, which was originally written by Tamas Patrovic and
can be considered to be its successor. =Helm= cleans the legacy code that is leaner,
modular, and unchained from constraints of backward compatibility.

[[https://github.com/emacs-helm/helm][Bozhidar Batsov]]
#+END_QUOTE


#+BEGIN_SRC emacs-lisp
(use-package helm
  :defer 1
  :config
  (helm-mode 1)
  (setq-default
   helm-always-two-windows t
   helm-display-header-line nil
   helm-split-window-default-side 'left)
  (set-face-attribute 'helm-match nil :foreground zenburn/green+2 :weight 'normal)
  (set-face-attribute 'helm-prefarg nil :foreground zenburn/red)
  (set-face-attribute 'helm-source-header nil
                      :box nil :background 'unspecified :height me/font-size-header))
#+END_SRC

Helm sub-modules can be customized separately. Many basic Emacs commands have their
Helm equivalents.

#+BEGIN_SRC emacs-lisp
(use-package helm-buffers
  :ensure nil
  :after helm
  :config
  (setq-default helm-buffers-fuzzy-matching t)
  (set-face-attribute 'helm-buffer-directory nil
                      :background 'unspecified :foreground zenburn/blue)
  (set-face-attribute 'helm-buffer-size nil :foreground zenburn/bg+3))

(use-package helm-color
  :ensure nil
  :after helm)

(use-package helm-command
  :ensure nil
  :after helm
  :bind ([remap execute-extended-command] . helm-M-x)
  :config
  (setq-default helm-M-x-fuzzy-match t)
  (set-face-attribute 'helm-M-x-key nil :foreground zenburn/orange :underline nil))

(use-package helm-files
  :ensure nil
  :after helm
  :bind (:map helm-find-files-map ("C-s" . helm-ff-run-grep-ag))
  :config
  (set-face-attribute 'helm-ff-dotted-directory nil :background 'unspecified))

(use-package helm-grep
  :ensure nil
  :after helm
  :config (set-face-attribute 'helm-grep-lineno nil :foreground zenburn/yellow-2))

(use-package helm-misc
  :ensure nil
  :after helm
  :bind ([remap switch-to-buffer] . helm-buffers-list))

(use-package helm-mode
  :ensure nil
  :after helm
  :config
  (setq-default
   helm-completion-in-region-fuzzy-match t
   helm-mode-fuzzy-match t))

(use-package helm-net
  :ensure nil
  :after helm
  :config (setq-default helm-net-prefer-curl t))

(use-package helm-regexp
  :ensure nil
  :after helm
  :config (set-face-attribute 'helm-moccur-buffer nil :foreground zenburn/blue))
#+END_SRC


** 12. Helm Plugins

Fourth-party packages for Helm.

- *NOTE*: Does not respect =helm-split-window-default-side=
          (https://github.com/ShingoFukuyama/helm-css-scss/issues/7).

#+BEGIN_SRC emacs-lisp

(use-package helm-css-scss
  :after helm
  :config (setq-default helm-css-scss-split-direction 'split-window-horizontally))

(use-package helm-descbinds
  :after helm
  :bind ([remap describe-key] . helm-descbinds)
  :config (setq-default helm-descbinds-window-style 'split-window))

(use-package helm-describe-modes
  :after helm
  :bind ([remap describe-mode] . helm-describe-modes))

(use-package helm-flycheck
  :after helm)

(use-package helm-projectile
  :after helm
  :config (helm-projectile-toggle 1))
#+END_SRC


** 13. Linters

Flycheck lints warnings and errors directly within buffers. It can check a lot of
different syntaxes, as long as you make sure that Emacs has access to the binaries
(see [[./README.md][README.md]]).

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (add-hook 'emacs-lisp-mode-hook 'flycheck-mode)
  (add-hook 'js-mode-hook 'flycheck-mode)
  (add-hook 'scss-mode-hook 'flycheck-mode)
  :config
  (setq-default
   flycheck-check-syntax-automatically '(save mode-enabled)
   flycheck-disabled-checkers '(emacs-lisp-checkdoc)
   flycheck-display-errors-delay .3)
  (set-face-attribute 'flycheck-error nil :underline zenburn/red-1)
  (set-face-attribute 'flycheck-info nil :underline zenburn/blue+1)
  (set-face-attribute 'flycheck-warning nil :underline zenburn/orange)
  (set-face-attribute 'flycheck-fringe-error nil :foreground zenburn/red-1)
  (set-face-attribute 'flycheck-fringe-info nil :foreground zenburn/blue+1)
  (set-face-attribute 'flycheck-fringe-warning nil :foreground zenburn/orange))
#+END_SRC

-----

[[#dotemacs][Back to top]]
